generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roleId    String
  role      Role
  firstName String
  lastName  String
  address   String
  zip       Int
  city      String
  phone     Int
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Car[]    @relation("CustomerCars")
  orders    Order[]  @relation("CustomerOrders")
}

model Employee {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  role         Role
  departmentId String     @db.ObjectId
  department   Department @relation(fields: [departmentId], references: [id])
  firstName    String
  lastName     String
  email        String     @unique
  password     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Car {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  customerId           String   @db.ObjectId
  customer             Customer @relation(fields: [customerId], references: [id], name: "CustomerCars")
  registrationNumber   String   @unique
  vin                  String   @unique
  brand                String
  model                String
  modelVariant         String
  firstRegistration    DateTime
  mileage              Int
  lastInspectionDate   DateTime
  lastInspectionResult String
  lastInspectionKind   String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orders               Order[]  @relation("CarOrders")
}

model Department {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  Employee Employee[]
}

model Order {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  carId            String             @db.ObjectId
  car              Car                @relation(fields: [carId], references: [id], name: "CarOrders")
  status           OrderStatus
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  WorkflowInstance WorkflowInstance[]
  customerId       String?            @db.ObjectId
  customer         Customer?          @relation(fields: [customerId], references: [id], name: "CustomerOrders")
}

model WorkflowInstance {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  workflowId    String         @db.ObjectId
  workflow      Workflow       @relation(fields: [workflowId], references: [id])
  orderId       String         @db.ObjectId
  order         Order          @relation(fields: [orderId], references: [id])
  status        OrderStatus
  taskInstances TaskInstance[]
}

model TaskInstance {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  taskId             String           @db.ObjectId
  task               Task             @relation(fields: [taskId], references: [id])
  workflowInstanceId String           @db.ObjectId
  workflowInstance   WorkflowInstance @relation(fields: [workflowInstanceId], references: [id])
  status             TaskStatus
  comments           String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Task {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String         @unique
  time         Float
  description  String
  TaskInstance TaskInstance[]
}

model Workflow {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  WorkflowInstance WorkflowInstance[]
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

enum OrderStatus {
  AWAITING_CUSTOMER
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
